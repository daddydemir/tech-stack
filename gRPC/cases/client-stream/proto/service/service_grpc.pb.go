// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: service.proto

package service

import (
	message "client-stream/proto/message"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServiceClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (ClientService_UploadFileClient, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (ClientService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientService_ServiceDesc.Streams[0], "/ClientService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientServiceUploadFileClient{stream}
	return x, nil
}

type ClientService_UploadFileClient interface {
	Send(*message.Request) error
	CloseAndRecv() (*message.Response, error)
	grpc.ClientStream
}

type clientServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *clientServiceUploadFileClient) Send(m *message.Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientServiceUploadFileClient) CloseAndRecv() (*message.Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(message.Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientServiceServer is the server API for ClientService service.
// All implementations must embed UnimplementedClientServiceServer
// for forward compatibility
type ClientServiceServer interface {
	UploadFile(ClientService_UploadFileServer) error
	mustEmbedUnimplementedClientServiceServer()
}

// UnimplementedClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientServiceServer struct {
}

func (UnimplementedClientServiceServer) UploadFile(ClientService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedClientServiceServer) mustEmbedUnimplementedClientServiceServer() {}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientServiceServer).UploadFile(&clientServiceUploadFileServer{stream})
}

type ClientService_UploadFileServer interface {
	SendAndClose(*message.Response) error
	Recv() (*message.Request, error)
	grpc.ServerStream
}

type clientServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *clientServiceUploadFileServer) SendAndClose(m *message.Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientServiceUploadFileServer) Recv() (*message.Request, error) {
	m := new(message.Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _ClientService_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
