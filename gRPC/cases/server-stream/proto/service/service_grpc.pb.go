// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	message "server-stream/proto/message"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerServiceClient is the client API for ServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerServiceClient interface {
	GetVideoStream(ctx context.Context, in *message.Request, opts ...grpc.CallOption) (ServerService_GetVideoStreamClient, error)
}

type serverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerServiceClient(cc grpc.ClientConnInterface) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) GetVideoStream(ctx context.Context, in *message.Request, opts ...grpc.CallOption) (ServerService_GetVideoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerService_ServiceDesc.Streams[0], "/ServerService/GetVideoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverServiceGetVideoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerService_GetVideoStreamClient interface {
	Recv() (*message.Response, error)
	grpc.ClientStream
}

type serverServiceGetVideoStreamClient struct {
	grpc.ClientStream
}

func (x *serverServiceGetVideoStreamClient) Recv() (*message.Response, error) {
	m := new(message.Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerServiceServer is the server API for ServerService service.
// All implementations must embed UnimplementedServerServiceServer
// for forward compatibility
type ServerServiceServer interface {
	GetVideoStream(*message.Request, ServerService_GetVideoStreamServer) error
	mustEmbedUnimplementedServerServiceServer()
}

// UnimplementedServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerServiceServer struct {
}

func (UnimplementedServerServiceServer) GetVideoStream(*message.Request, ServerService_GetVideoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVideoStream not implemented")
}
func (UnimplementedServerServiceServer) mustEmbedUnimplementedServerServiceServer() {}

// UnsafeServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServiceServer will
// result in compilation errors.
type UnsafeServerServiceServer interface {
	mustEmbedUnimplementedServerServiceServer()
}

func RegisterServerServiceServer(s grpc.ServiceRegistrar, srv ServerServiceServer) {
	s.RegisterService(&ServerService_ServiceDesc, srv)
}

func _ServerService_GetVideoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(message.Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServiceServer).GetVideoStream(m, &serverServiceGetVideoStreamServer{stream})
}

type ServerService_GetVideoStreamServer interface {
	Send(*message.Response) error
	grpc.ServerStream
}

type serverServiceGetVideoStreamServer struct {
	grpc.ServerStream
}

func (x *serverServiceGetVideoStreamServer) Send(m *message.Response) error {
	return x.ServerStream.SendMsg(m)
}

// ServerService_ServiceDesc is the grpc.ServiceDesc for ServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVideoStream",
			Handler:       _ServerService_GetVideoStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
